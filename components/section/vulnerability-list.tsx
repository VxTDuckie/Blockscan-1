import React, { useState, useEffect } from 'react'
import { ChevronDown } from 'lucide-react';
import { marked } from 'marked';

interface VulnerabilityItem {
  vulnerability: string;
  severity: string;
  recommendation: string;
}

interface VulnerabilityListProps {
  vulnList: VulnerabilityItem[] | null;
  markdownContent: string;
}

const VulnerabilityList: React.FC<VulnerabilityListProps> = ({ vulnList, markdownContent }) => {
  const [openIndex, setOpenIndex] = useState<number | null>(null);
  const [content, setContent] = useState<string>('');

  useEffect(() => {
    const convertToHTML = async () => {
    try {
      const htmlContent = await Promise.resolve(marked.parse(String(markdownContent || '')));
      setContent(htmlContent);
    } catch (error) {
      console.error('Error converting markdown:', error);
      setContent('');
    }
  }
  convertToHTML();
  }, [markdownContent]);

  if (!vulnList) {
    return <div>No vulnerabilities found</div>;
  }
  
  const toggleQuestion = (index: number) => {
    setOpenIndex(openIndex === index ? null : index);
  };

  return (
    <div className='flex gap-8'>
     
      <div className='lg:w-2/5 h-auto'>
        <h3 className='text-hard-red text-xl font-bold py-4'>Vulnerabilities Summary</h3>
        {vulnList.map((vuln, index) => (
          <div key={index} className="bg-white shadow-sm rounded-xl mb-4">
            <button 
              onClick={() => toggleQuestion(index)} 
              className='flex items-center w-full text-left p-4 focus:outline-none'
            >
              <div className={`text-xl h-3 w-3 rounded-full mr-4 ${
                vuln.severity === 'Low' ? 'bg-green-500' : 
                vuln.severity === 'Medium' ? 'bg-yellow-400' : 
                vuln.severity === 'High' ? 'bg-primary-red' : 
                vuln.severity === 'Optimization' ? 'bg-blue-500' : 
                'bg-gray-500'
              }`} 
              />
              <p className='text-[18px] flex-grow'>{vuln.vulnerability}</p>
              <ChevronDown className={`transform transition-transform ${openIndex === index ? 'rotate-180' : ''}`} />
            </button>
            
            <div className={`
              px-6 
              text-[16px] 
              bg-gray-500 
              rounded-b-xl 
              overflow-hidden 
              transition-all 
              duration-300 
              ease-in-out
              ${openIndex === index ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}
            `}> 
              <p className={`${
                vuln.severity === 'Low' ? 'text-green-500' : 
                vuln.severity === 'Medium' ? 'text-yellow-400' : 
                vuln.severity === 'High' ? 'text-primary-red' : 
                vuln.severity === 'Optimization' ? 'text-blue-500' : 
                'text-white'
              } pt-2  `}>
                Recommendation:
              </p>
              <p className="text-white pb-4">{vuln.recommendation}</p>
            </div>
          </div>
        ))}
      </div>
      <div className='border-l-2'></div>
      <div className='lg:w-3/5'>
      <h3 className='text-hard-red text-xl font-bold py-4'>Detailed Analysis</h3>
      <div 
        className='overflow-y-auto overflow-x-hidden bg-white p-4 rounded-xl shadow-sm max-h-[800px] markdown-content'
        dangerouslySetInnerHTML={{ __html: content }} 
      ></div>
      </div>

        
    </div>
  );
}

export default VulnerabilityList;